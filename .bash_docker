#!/bin/bash

# Common Aliases
alias dip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"
alias dim="docker images"
alias dex="docker exec -i -t"
alias dpa="docker ps -a"
alias denv="env | grep DOCKER_"
alias dips="docker ps -q | xargs docker inspect --format '{{ .NetworkSettings.IPAddress }}  {{ .Name }} {{ .Config.Image }} {{ .State.Running }} {{ .Id }}'"
alias dstop='docker stop $(docker ps -a -q)'

# Docker Machine
function dmenv() {
  eval "$(docker-machine env "${1:-default}")"
}
alias dmls="docker-machine ls"
alias dmstart="docker-machine start $1"
alias dmstop="docker-machine stop $1"

# Helper Functions
dcleanup(){
	docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
	docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

# Common / useful Docker containers
speedtest() { # Speed test network connection
	docker run --name speedtext --rm --net host tianon/speedtest
}
lynx() { # Text-based web browser
	docker run --name lynx --rm -it jess/lynx
} 

# see http://blog.bennycornelissen.nl/bwc-gui-apps-in-docker-on-osx/
if [ $(which docker-machine) ]; then
	export DOCKER_MACHINE=$(docker-machine active)

	dminit() {
        docker-machine start ${DOCKER_MACHINE}
        dmshell
	}

	dmshell() {
        eval $(docker-machine env ${DOCKER_MACHINE})
	}

	docker_if_not_running() {
        if [ $(docker-machine status ${DOCKER_MACHINE}) != 'Running' ]; then
			dminit
        fi
	}

	dmhosts() {
        DMHOSTNAME="dockerhost"

        sudo -v

        grep ${DMHOSTNAME} /etc/hosts > /dev/null && sudo sed -i '' "/${DMHOSTNAME}/d" /etc/hosts
        sudo echo "$(docker-machine ip ${DOCKER_MACHINE}) ${DMHOSTNAME}" | sudo tee -a /etc/hosts
	}

	if [ $(docker-machine status ${DOCKER_MACHINE}) == 'Running' ]; then
        dmshell &> /dev/null
	fi

fi # end docker-machine

# xQuartz (required for running Dockers with GUI in OS X, together with socat)
xquartz_if_not_running() {
	v_nolisten_tcp=$(defaults read org.macosforge.xquartz.X11 nolisten_tcp)
	v_xquartz_app=$(defaults read org.macosforge.xquartz.X11 app_to_run)

	if [ $v_nolisten_tcp == "1" ]; then
		defaults write org.macosforge.xquartz.X11 nolisten_tcp 0
	fi

	if [ $v_xquartz_app != "/usr/bin/true" ]; then
		defaults write org.macosforge.xquartz.X11 app_to_run /usr/bin/true
	fi

	netstat -an | grep 6000 &> /dev/null || open -a XQuartz
	while ! netstat -an \| grep 6000 &> /dev/null; do
		sleep 2
	done
	export DISPLAY=:0
}
close_xquartz() {
	osascript -e 'quit app "xQuartz"'
}

firefox() {
    xquartz_if_not_running
    docker_if_not_running
    xhost +$(docker-machine ip ${DOCKER_MACHINE})

    docker run --name firefox --rm \
    	--memory 512mb --net host --security-opt seccomp:unconfined \
    	-e DISPLAY=$(docker-machine inspect ${DOCKER_MACHINE} --format={{.Driver.HostOnlyCIDR}} | cut -d'/' -f1):0 \
    	jess/firefox
    
    close_xquartz
}
tor() {
    xquartz_if_not_running
    docker_if_not_running
    xhost +$(docker-machine ip ${DOCKER_MACHINE})

    docker run --name tor --rm \
    	--privileged \
    	-e DISPLAY=$(docker-machine inspect ${DOCKER_MACHINE} --format={{.Driver.HostOnlyCIDR}} | cut -d'/' -f1):0 \
    	jess/tor-browser

    close_xquartz
}
chrome() {
	xquartz_if_not_running
    docker_if_not_running
    xhost +$(docker-machine ip ${DOCKER_MACHINE})

    docker run --name chrome --rm \
    	--memory 512mb --net host --security-opt seccomp:unconfined \
        -e DISPLAY=$(docker-machine inspect ${DOCKER_MACHINE} --format={{.Driver.HostOnlyCIDR}} | cut -d'/' -f1):0 \
        jess/chrome

    close_xquartz
}
