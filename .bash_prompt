#!/bin/bash

# Shell prompt based on the Solarized Dark theme
export TERM='xterm-256color';

# Solarized colors, taken from http://git.io/solarized-colors
tput sgr0; # reset colors
BOLD=$(tput bold);
RESET=$(tput sgr0);
BLACK=$(tput setaf 0);
BLUE=$(tput setaf 33);
CYAN=$(tput setaf 37);
GREEN=$(tput setaf 64);
ORANGE=$(tput setaf 166);
PURPLE=$(tput setaf 125);
RED=$(tput setaf 124);
VIOLET=$(tput setaf 61);
WHITE=$(tput setaf 15);
YELLOW=$(tput setaf 136);

function setUserStyle {
    # Highlight the user name when logged in as root
    if [[ "${USER}" == "root" ]]; then
        USER_STYLE="${RED}";
    else
        USER_STYLE="${ORANGE}";
    fi;
}

function setHostStyle {
    # Highlight the hostname when connected via SSH
    if [[ "${SSH_TTY}" ]]; then
        HOST_STYLE="${BOLD}${RED}";
    else
        HOST_STYLE="${YELLOW}";
    fi;
}

function setVirtualEnv {
    # Determine active Python virtualenv details
    if [[ `pyenv version-name` == "system" ]]; then
        VIRTUAL_ENVIRONMENT="";
    else
        VIRTUAL_ENVIRONMENT="${VIOLET}(`pyenv version-name`)${COLOR_NONE} ";
    fi;
}

function setGIT {
    # Determine the branch/state information for git (if any)
    if [[ `git branch` ]]; then
        GIT_STATUS="$(git status 2> /dev/null)"

        if [[ ${GIT_STATUS} =~ "working directory clean" ]]; then
            GIT_STATE="${BLUE}"
        elif [[ ${git_status} =~ "Changes to be committed" ]]; then
            GIT_STATE="${YELLOW}"
        else
            GIT_STATE="${RED}"
        fi;

        GIT_REMOTE_PATTERN="# Your branch is (ahead|behind)+ "
        if [[ ${GIT_STATUS} =~ ${GIT_REMOTE_PATTERN} ]]; then
            if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
                GIT_REMOTE="↑"
            else
                GIT_REMOTE="↓"
            fi;
        else
            GIT_REMOTE=""
        fi;
  
        GIT_REMOTE_PATTERN="# Your branch and (.*) have diverged"
        if [[ ${GIT_STATUS} =~ ${GIT_REMOTE_PATTERN} ]]; then
            GIT_REMOTE="↕"
        fi;

        GIT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"

        GIT=" ${GIT_STATE}(${GIT_BRANCH})${GIT_REMOTE}${COLOR_NONE} "
    else
        GIT=""
    fi;
}

function setBash {
    # Set the full bash prompt
    setUserStyle
    setHostStyle
    setVirtualEnv
    setGIT

    PS1="\[\033]0;\w\007\]";
    PS1+="\[${BOLD}\]\n"; # newline
    PS1+="\[${VIRTUAL_ENVIRONMENT}\]"; # virtual environment
    PS1+="\[${USER_STYLE}\]\u"; # username
    PS1+="\[${WHITE}\] at ";
    PS1+="\[${HOST_STYLE}\]\h"; # host
    PS1+="\[${WHITE}\] in ";
    PS1+="\[${GREEN}\]\w"; # working directory
    PS1+="\[${GIT}\]"; # git
    PS1+="\n";
    PS1+="\[${WHITE}\]\$ \[${RESET}\]"; # `$` (and reset color)

    PS2="\[${YELLOW}\]→ \[${RESET}\]";
}

# Tell bash to execute this function just before displaying its prompt
PROMPT_COMMAND=setBash
